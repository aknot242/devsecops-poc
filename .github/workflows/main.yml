name: DevSecOps GitHub Action CI-CD

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch- test
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    ignore-tags:
      - "*"
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: edgar-rg
  AZURE_WEBAPP_NAME: edgar-devsecopspocappcontainer
  AZURE_NAP_NAME: edgar-nap-devsecopspocappcontainer
  ACR_NAME: aknot242

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      name: Code Checkout

    - uses: actions/setup-dotnet@v1
      name: DotNet Build
      with:
        dotnet-version: '5.0.x'
    - run: dotnet build -c Release DotNetCoreWebApp/DotNetCoreWebApp.csproj -o {env.DOTNET_ROOT}/app/build   

    - name: DotNet Publish
      run: |
        pwd
        dotnet publish -c Release DotNetCoreWebApp/DotNetCoreWebApp.csproj -o {env.DOTNET_ROOT}/app/build
    
    # Performs an Anchore container image vulnerability and compliance scan, 
    # and integrates the results with GitHub Advanced Security code scanning feature.
    # For more information on the Anchore scan action usage and parameters, see
    # https://github.com/anchore/scan-action.  For more information on
    # Anchore container image scanning in general, see
    # https://docs.anchore.com.
    # - name: Build the Docker image locally for Anchore Container Scan
    #   run:  |
    #     cd DotNetCoreWebApp
    #     docker build --file Dockerfile --tag devsecops/pocimage:latest .
    #     docker images
    
    # - name: Run the local Anchore scan action itself with GitHub Advanced Security code scanning integration enabled
    #   uses: anchore/scan-action@v2
    #   with:
    #     image: "devsecops/pocimage:latest"
    #     fail-build: true
    #     severity-cutoff: medium
    
    # - name: Upload Artifact
    #   if: ${{ always() }}
    #   uses: actions/upload-artifact@v2.2.0
    #   with:
    #     name: anchore-vulnerabilities
    #     path: vulnerabilities.json

    - uses: azure/login@v1
      name: Az Login
      with:
       creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - uses: azure/docker-login@v1
      name: ACR Login
      with:
        login-server: ${{ secrets.REGISTRY_SERVERNAME }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push App Protect container
      run: |
        cd app-protect
        docker build -t ${{ secrets.REGISTRY_SERVERNAME }}/nap-dotnetcorewebapp:${{ github.sha }} -f NAP-App-Dockerfile .
        docker push ${{ secrets.REGISTRY_SERVERNAME }}/nap-dotnetcorewebapp:${{ github.sha }}

    - name: Build and push app container
      run: |
        cd DotNetCoreWebApp
        docker build -t ${{ secrets.REGISTRY_SERVERNAME }}/dotnetcorewebapp:${{ github.sha }} .
        docker push ${{ secrets.REGISTRY_SERVERNAME }}/dotnetcorewebapp:${{ github.sha }}
  
    - uses: Azure/container-scan@v0.1
      name: GitHub Container Scan
      with:
        image-name: ${{ secrets.REGISTRY_SERVERNAME }}/dotnetcorewebapp:${{ github.sha }}

    # - name: Create a new ACI for App Container
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: latest
    #     inlineScript: |
    #       az account show
    #       az configure --defaults group=${{ env.AZURE_RESOURCE_GROUP }} location=westus2
    #       az container create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_WEBAPP_NAME }} --image '${{ secrets.REGISTRY_SERVERNAME }}/dotnetcorewebapp:${{ github.sha }}' --dns-name-label ${{ env.AZURE_WEBAPP_NAME }} --registry-login-server ${{ secrets.REGISTRY_SERVERNAME }} --registry-username ${{ secrets.REGISTRY_USERNAME }} --registry-password ${{ secrets.REGISTRY_PASSWORD }} --ports 80

    # - name: Create a new ACI for NAP Container
    #   uses: azure/CLI@v1
    #   with:
    #     azcliversion: latest
    #     inlineScript: |
    #       az account show
    #       az configure --defaults group=${{ env.AZURE_RESOURCE_GROUP }} location=westus2
    #       az container create --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_NAP_NAME }} --image '${{ secrets.REGISTRY_SERVERNAME }}/nap-dotnetcorewebapp:${{ github.sha }}' --dns-name-label ${{ env.AZURE_NAP_NAME }} --registry-login-server ${{ secrets.REGISTRY_SERVERNAME }} --registry-username ${{ secrets.REGISTRY_USERNAME }} --registry-password ${{ secrets.REGISTRY_PASSWORD }} --ports 80

      # Deploy ARM template
    - name: Run ARM deploy
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
        template: ./azuredeploy.json
        parameters: imageRegistryLoginServer=${{ secrets.REGISTRY_SERVERNAME }} imageRegistryUsername=${{ secrets.REGISTRY_USERNAME }} imageRegistryPassword=${{ secrets.REGISTRY_PASSWORD }} container1Image=${{ secrets.REGISTRY_SERVERNAME }}/nap-dotnetcorewebapp:${{ github.sha }} container2Image=${{ secrets.REGISTRY_SERVERNAME }}/nap-dotnetcorewebapp:${{ github.sha }}

    - name: OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.4.0
      with:
        target: "http://edgar-nap-devsecopspocappcontainer.westus2.azurecontainer.io/"
        rules_file_name: '.github/zap/rules.tsv'
        fail_action: true

    - name: Azure logout
      run: |
        az logout
